#!/usr/bin/env bash

quiet=$2;

build_dir=$(dirname $0)
cd $build_dir

build_tools_dir=tools
if [ ! -e $build_tools_dir ]; then
    echo "build tools dir: $build_tools_dir does not exist"
    exit
fi

getdata=$build_tools_dir/read-data
if [ ! -e $getdata ]; then
    echo "read-data: $getdata does not exist"
    exit
fi

config_file=config.ini
if [ ! -e $config_file ]; then
    echo "config file: $config_file does not exist"
    exit
fi

distroot=$($getdata $config_file files dist)
if [ ! -e $distroot ]; then
    echo "dist root: $distroot does not exist"
    exit
fi
output_file=build.log

source $build_tools_dir/color_and_error.bash

deps="java gjslint fixjsstyle html-builder read-data tidy"  # <-- not used
if [ ! -e "$(which java)" ]; then
    error 'Java must be installed to run the closure compiler'
fi
COMPILER=$($getdata $config_file files js_compiler)
if [ ! -e "$COMPILER" ]; then
    echo 'Download from: http://closure-compiler.googlecode.com/files/compiler-latest.zip'
    error "compiler: $COMPILER does not exist"
fi
if [ ! $(which fixjsstyle) ]; then
    echo 'To install: sudo easy_install http://closure-linter.googlecode.com/files/closure_linter-latest.tar.gz'
    error 'fixjsstyle is not installed'
fi
if [ ! -e $(which tidy) ]; then
    error 'Tidy must be installed'
fi

COMPILE_VENDOR='false'
if [ "$2" == 'compile_vendor' ]; then
    COMPILE_VENDOR='true'
fi

title(){
    if [ "$quiet" == 'quiet' ]; then return; fi
    echo ''
    colorize "$1" $ulon$blueb
}
ok(){
    if [ "$quiet" == 'quiet' ]; then return; fi
    colorize "[ok]" $greenf nonl
    echo " $*"
}
err(){
    if [ "$quiet" == 'quiet' ]; then
        echo "[$1] $2"
    else
        colorize "[$1]" $redf$boldon nonl
        echo " $2"
    fi
    exit 1
}
get-files(){
    ini_files=$($build_tools_dir/read-data $config_file files $1)
    for f in $ini_files; do
        if [ ! -e $f ]; then
            echo "$f Does not exist."
            exit 1
        fi
    done

    echo $ini_files
}


# ----------------------------------------------------
verify(){
    for type in html js css images vendor_js vendor_externs vendor_images; do
        title $type
        for f in $($getdata $config_file files $type); do
            if [ ! -e $f ]; then
                colorize "[error]" $redf nonl
                colorize " $f" $redf
            else
                ok $f
            fi
        done
    done

}


# ----------------------------------------------------
dolint(){
    if [ "$quiet" == 'quiet' ]; then return; fi

    title 'Lint js_assets:'

    js_assets=$(get-files js) || error $js_assets
    for f in $js_assets; do
        out=$(fixjsstyle --strict $f);
        ok "$f  $out";
    done

    #for f in $js_assets; do
    #    # if gjslint --strict $f 2>&1 | tee --append $output_file; then
    #    if gjslint --strict $f; then
    #       ok $f
    #    else
    #       echo ''
    #       while true; do
    #           read -p "Lint error: Try to fix errors?  <y> to fix: " yn
    #           case $yn in
    #               [Yy]* )
    #                   fixjsstyle --strict $f;
    #                   break
    #                   ;;
    #               * )
    #                   exit
    #                   ;;
    #           esac
    #       done
    #       exit
    #    fi
    #done
}


# ----------------------------------------------------
# rebuild app dir structure

rebuild_dir(){
    title 'Build dist dir:'

    if ! rm -rf $distroot/*; then
        error "could not delete $distroot"
    fi
    ok "deleted: $distroot/*"

    for f in js css css/images images; do
        new=$distroot/$f
        if ! mkdir $new; then
            error "could not create dir: $new"
        fi
        ok "created dir: $new"
    done
}


# ----------------------------------------------------
compile_app(){
    title 'Compile app js:'

    js_assets=$(get-files js) || error $js_assets
    js="$distroot/js"
    format='--formatting PRINT_INPUT_DELIMITER'
    if [ "$1" = 'pretty' ]; then
        format='--formatting PRINT_INPUT_DELIMITER --formatting PRETTY_PRINT'
    fi

    #fastcompile='--compilation_level ADVANCED_OPTIMIZATIONS'
    #if [ "$1" = 'fastcompile' ]; then
    #    fastcompile=''
    #fi

    js_name='main.js'

    if [ "$1" == 'fast' ]; then
        cat $js_assets > $js/$js_name
        ok "FAST COMPILE - $js/$js_name"
        exit
    fi

    # build [--js FILE ...etc.] list:
    for f in $js_assets; do
        source_list="$source_list --js $f"
    done

    # externs extractor: http://www.dotnetwise.com/Code/Externs/index.html
    # prebuilt externs: http://code.google.com/p/closure-compiler/wiki/ExternsForCommonLibraries
    # https://code.google.com/p/closure-compiler/wiki/jQueryExpansions

    vendor_externs=$(get-files vendor_externs) || error $vendor_externs
    for f in $vendor_externs; do
        externs="$externs --externs $f"
    done

    if java -jar $COMPILER \
            --compilation_level ADVANCED_OPTIMIZATIONS \
            $format \
            $source_list \
            --create_source_map $js/$js_name.sourcemap \
            $externs \
            --js_output_file $js/$js_name \
            > $output_file 2>&1
            # 1>$output_file 2>$output_file;
    then
        if $(grep WARNING $output_file); then
            err $(cat $output_file)
        fi

        # write the source map string to the compiled js
        (echo; echo "//@ sourceMappingURL=$js_name.sourcemap") >> $js/$js_name

        ok "$js/main.js"
    else
        err $(cat $output_file)
        err 'compile error' " $js/$js_name"
    fi
}


# ----------------------------------------------------
# compile or copy vendor libs

compile-or-copy_vendor(){
    vend_temp=vendor-UNCOMPILED.js
    vend_js=vendor.js
    vendor_libs=$(get-files vendor_js) || error $vendor_libs
    if [ $COMPILE_VENDOR = 'true' ]; then
        title 'Compile vendor js:'
        cat $vendor_libs > $js/$vend_temp
            #--formatting PRETTY_PRINT \
        if java -jar $COMPILER \
                --compilation_level SIMPLE_OPTIMIZATIONS \
                --js $js/$vend_temp \
                --js_output_file $js/vend.js \
            1>$output_file 2>$output_file; then

            rm $js/$vend_temp
            ok " $js/vend_js"
        else
            err 'compile error' " $js/$vend_temp"
        fi
    else
        title 'Copy vendor js:'
        if cp $vendor_libs $js; then
            for f in $vendor_libs; do
                ok "$(basename $f)";
            done
        else
            err 'copy vendor js failed'
        fi
    fi
}


# ----------------------------------------------------
copy_css(){
    title 'Copy CSS:'
    css_assets=$(get-files css) || error $css_assets
    if cp $css_assets "$distroot/css"; then
        ok $css_assets
    else
        err $css_assets
    fi

    vendor_images=$(get-files vendor_images) || error $vendor_images
    if cp $vendor_images "$distroot/css/images"; then
        ok $vendor_images
    else
        err $vendor_images
    fi
}


# ----------------------------------------------------
build_html(){
    title 'Build html:'

    destdir=$distroot
    parent_template=$($getdata $config_file files "default parent template")
    html_assets=$(get-files html) || error $html_assets

    template_root=$($getdata $config_file files template_dir)
    app_name=$($getdata $config_file strings 'app name')

    for content_html in $html_assets; do
        if $build_tools_dir/html-builder $content_html $destdir $parent_template \
            --var="app_name::$app_name" \
            --var="template_root::$template_root" \
              >$output_file; then
            ok $f
        else
            more $output_file
            err 'compile error' $f
            exit 1
        fi
    done
}


# ----------------------------------------------------
tidy_html(){
    title 'Tidy html:'

    tidy -indent -modify -asxhtml \
        -wrap 100 -file $output_file $destdir/*html;

    if [ $? == 0 ]; then
        ok 'tidy: $destdir'
    elif [ $? == 1 ]; then
        warn=$(colorize "[some warnings]" $yellowf)
        ok "$warn tidy: $destdir/*html"
    elif [ $? == 2 ]; then
        err 'tidy error' " $destdir/*html"
    fi
}

# ----------------------------------------------------
showtree(){
    if [ "$quiet" == 'quiet' ]; then return; fi
    echo
    tree -h --dirsfirst $distroot
}

case $1 in
    dev)
        dolint
        rebuild_dir
        compile_app 'pretty'
        compile-or-copy_vendor
        copy_css
        build_html
        # tidy_html

        showtree
        ;;
    fast)
        build_html
        copy_css
        compile_app 'fast'
        compile-or-copy_vendor

        showtree
        ;;
    prod)
        echo 'Not implemented yet'
        # compile js handlebar templates
        # set debug flag with @define
        ;;
    compile_vendor)
        echo 'Not implemented yet'
        ;;
    clean)
        echo 'Not implemented yet'
        # delete sqlite db?
        ;;
    lint)
        dolint
        ;;
    verifysource)
        verify
        ;;
    *)
        if [ "$1" ]; then
            echo "Unknown command: $1"
        fi
        echo "Usage: $(basename $0) [dev|prod|fast|compile_vendor|clean|lint|verifysource]"

esac
